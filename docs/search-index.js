var searchIndex = new Map(JSON.parse('[\
["ssh_auth_cargo_publish",{"doc":"src/bin/ssh_auth_cargo_publish/main.rs","t":"HHHH","n":["main","panic_set_hook","print_help","tracing_init"],"q":[[0,"ssh_auth_cargo_publish"],[4,"core::panic::panic_info"]],"d":["entry point into the bin-executable","The original Rust report of the panic is ugly for the end …","print help","Initialize tracing to file logs/automation_tasks_rs.log"],"i":[0,0,0,0],"f":"{{}b}{db}11","c":[],"p":[[1,"unit"],[5,"PanicInfo",4]],"b":[]}],\
["ssh_auth_cargo_publish_lib",{"doc":"ssh_auth_cargo_publish","t":"SSSSSCCHCHPPPPGPPIPNNNNNNNNNNNNNNNSFKSSSSNNCCCMNNCCNNNNFNNNONNNNNNONNNNFNNNNNNNOONNNNFNNNNNNOONNNNFNNONNNNNNNNNFNNNOHNNNNNNONNNN","n":["BLUE","GREEN","RED","RESET","YELLOW","crates_mod","error_mod","publish","secrets_always_local_mod","publish","Err","ErrorFromStr","ErrorFromString","InfallibleError","LibError","Ok","ParseIntError","ResultWithLibError","StdIoError","borrow","borrow_mut","fmt","fmt","from","from","from","from","into","source","to_string","try_from","try_into","type_id","vzip","BLUE","EncryptedString","ExposeSecret","GREEN","RED","RESET","YELLOW","borrow","borrow_mut","crates_io_mod","decrypt_mod","encrypt_mod","expose_secret","from","into","secrecy_mod","ssh_mod","try_from","try_into","type_id","vzip","CratesIoClient","borrow","borrow_mut","decrypt_secret_token_in_memory","encrypted_token","from","into","new_interactive_input_secret_token","new_with_stored_secret_token","new_wo_secret_token","publish_to_crates_io","session_passcode","try_from","try_into","type_id","vzip","Decryptor","borrow","borrow_mut","decrypt_symmetric","from","into","new_for_decrypt","return_secret_string","secret_passcode_bytes","secret_string","try_from","try_into","type_id","vzip","Encryptor","borrow","borrow_mut","encrypt_symmetric","from","into","new_for_encrypt","secret_passcode_bytes","secret_string","try_from","try_into","type_id","vzip","SecretEncryptedString","borrow","borrow_mut","encrypted_string","expose_decrypted_secret","from","into","new_with_secret_string","new_with_string","try_from","try_into","type_id","vzip","SshContext","borrow","borrow_mut","decrypt_from_file_data","decrypted_string","expand_path_check_private_key_exists","from","get_decrypted_string","get_secret_token_and_encrypt","into","new","sign_with_ssh_agent_or_identity_file","signed_passcode_is_a_secret","try_from","try_into","type_id","vzip"],"q":[[0,"ssh_auth_cargo_publish_lib"],[9,"ssh_auth_cargo_publish_lib::crates_mod"],[10,"ssh_auth_cargo_publish_lib::error_mod"],[34,"ssh_auth_cargo_publish_lib::secrets_always_local_mod"],[55,"ssh_auth_cargo_publish_lib::secrets_always_local_mod::crates_io_mod"],[71,"ssh_auth_cargo_publish_lib::secrets_always_local_mod::decrypt_mod"],[85,"ssh_auth_cargo_publish_lib::secrets_always_local_mod::encrypt_mod"],[98,"ssh_auth_cargo_publish_lib::secrets_always_local_mod::secrecy_mod"],[111,"ssh_auth_cargo_publish_lib::secrets_always_local_mod::ssh_mod"],[128,"core::fmt"],[129,"core::fmt"],[130,"core::num::error"],[131,"core::convert"],[132,"core::error"],[133,"core::option"],[134,"alloc::string"],[135,"core::result"],[136,"core::any"],[137,"secrecy::string"],[138,"secrecy::vec"],[139,"camino"],[140,"camino"]],"d":["ANSI color","ANSI color","ANSI color","ANSI color","ANSI color","","Error library for this crate using thiserror","publish to crates.io retrieving the secret_token from …","","publish to crates.io retrieving the secret_token from …","Contains the error value","","","","Enum of possible errors from this library","Contains the success value","","Result type alias with fixed LibError using thiserror","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","ANSI color","A simple wrapper new-type around String just to show …","Expose a reference to an inner secret","ANSI color","Secrets like GitHub API secret_token, crates.io secret …","ANSI color","ANSI color","","","Publish to crates.io needs the crates.io secret_token. …","","","Expose secret: this is the only method providing access to …","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","The crate secrecy is probably great. But I want to encrypt …","","","","","","Struct CratesIoClient contains only private fields This …","","","decrypts the secret_token in memory","private field is set only once in the new() constructor","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create new CratesIo client","Use the stored crates.io secret_token","Create new CratesIo client without secret_token","Publish to crates.io","Passcode for encrypt the secret_token to encrypted_token …","","","","","The secrets must not leave this crate. They are never …","","","Decrypts encrypted_string with secret_passcode_bytes","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","The secrets must not leave this crate. They are never …","","","Encrypts secret_string with secret_passcode_bytes","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","decrypt from file data and write the decrypted secret in …","","Expand path and check if identity file exists","Returns the argument unchanged.","","get secret_token and encrypt","Calls <code>U::from(self)</code>.","","Sign with ssh-agent or with identity_file","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,27,3,3,3,0,27,3,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,18,18,0,0,0,14,18,18,0,0,18,18,18,18,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,17,17,17,17,17,17,17,17,17,17,17,17,17,0,21,21,21,21,21,21,21,21,21,21,21,21,0,22,22,22,22,22,22,22,22,22,22,22,22,0,23,23,23,23,0,23,23,23,23,23,23,23,23,23,23,23],"f":"```````{bd}`0`````````{ce{}{}}0{{fh}j}0{lf}{cc{}}{nf}{A`f}5{f{{Ad{Ab}}}}{cAf{}}{c{{Ah{e}}}{}{}}0{cAj{}}9```````99```{Alc{}}7:``221:`::{AnB`}`8;{{}An}00{And}`554=`=={{BbBd}d};>{{{Bh{Bf}}}Bb}{BbB`}``887{ce{}{}}`00{Bj{{Ad{Bd}}}}?1{{B`{Bh{Bf}}}Bj}``;;:2`22`{{Bl{Bh{Bf}}}B`}{cc{}}4{{B`{Bh{Bf}}}Bl}{{Af{Bh{Bf}}}Bl}??>6`66{{BnBd}d}`{C`Cb}4{BnB`}{BnBd}:{{}Bn}{{BnC`{Cd{Bf}}}d}`{c{{Ah{e}}}{}{}}0{cAj{}}>","c":[],"p":[[1,"str"],[1,"unit"],[6,"LibError",10],[5,"Formatter",128],[8,"Result",128],[5,"Error",129],[5,"ParseIntError",130],[6,"Infallible",131],[10,"Error",132],[6,"Option",133],[5,"String",134],[6,"Result",135],[5,"TypeId",136],[10,"ExposeSecret",34],[5,"CratesIoClient",55],[8,"SecretString",137],[5,"Decryptor",71],[5,"EncryptedString",34],[1,"u8"],[8,"SecretVec",138],[5,"Encryptor",85],[5,"SecretEncryptedString",98],[5,"SshContext",111],[5,"Utf8Path",139],[5,"Utf8PathBuf",139],[1,"array"],[8,"ResultWithLibError",10]],"b":[[21,"impl-Display-for-LibError"],[22,"impl-Debug-for-LibError"],[23,"impl-From%3CError%3E-for-LibError"],[25,"impl-From%3CParseIntError%3E-for-LibError"],[26,"impl-From%3CInfallible%3E-for-LibError"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
